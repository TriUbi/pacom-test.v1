@page "/"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Nav
@using DeviceFrontend.Helpers

@if (!isReady)
{
    <p>Laddar innehåll...</p>
}
else if (string.IsNullOrEmpty(JwtStore.Token))
{
    <p class="text-danger">
    <i class="bi bi-lock-fill"></i> Du måste <a href="/login">logga in</a> för att se enheterna
</p>

}
else
{
   <h2><i class="bi bi-hospital-fill me-2"></i>Enheter i sjukhuset</h2>

<div class="mb-3">
    <input @bind="newDeviceName" placeholder="Namn på ny enhet" class="form-control" />
    <button class="btn btn-success mt-2" @onclick="AddDevice">
        <i class="bi bi-plus-circle me-1"></i>Lägg till enhet
    </button>
</div>

    @if (devices == null)
    {
        <p>Laddar enheter...</p>
    }
    else if (devices.Count == 0)
    {
        <p>Inga enheter tillagda ännu.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Namn</th>
                    <th>Status</th>
                    <th>Styr</th>
                    <th>Ta bort</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var device in devices)
                {
                    <tr>
                        <td>@device.Name</td>
                     <td style="color:@(device.IsOn ? "green" : "red")">
                        @(device.IsOn
                            ? @<i class="bi bi-toggle-on fs-1"></i>
                            : @<i class="bi bi-toggle-off fs-1"></i>)
                    </td>
                        <td>

                           <button class="btn btn-primary" @onclick="() => ToggleDevice(device)">
                            <i class="bi @(device.IsOn ? "bi-power" : "bi-play-fill") me-1"></i>
                            @(device.IsOn ? "Stäng av" : "Starta")
                        </button>
                        </td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => DeleteDevice(device.Id)">X</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-outline-danger mt-2 ms-2" @onclick="Logout">
        <i class="bi bi-box-arrow-right me-1"></i>Logga ut
    </button>
    }
}

@code {
    private List<DeviceStatus>? devices;
    private string newDeviceName = "";
    private bool isReady = false;

    /// <summary>
    /// Representerar en enhet i systemet
    /// </summary>
    public class DeviceStatus
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public bool IsOn { get; set; }
    }


    /// <summary>
    /// Körs när sidan är färdigrenderad första gången
    /// Hämtar token från localStorage och laddar enheter
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JwtStore.Token ??= await JS.InvokeAsync<string>("localStorage.getItem", "jwt");

            if (!string.IsNullOrEmpty(JwtStore.Token))
            {
                await LoadDevices();
            }

            isReady = true;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Hämtar alla enheter från API och sparar i listan
    /// </summary>
    private async Task LoadDevices()
    {
        devices = await Http.GetFromJsonAsync<List<DeviceStatus>>("http://localhost:5277/api/status");
    }

    /// <summary>
    /// Växlar status (on/off) för en enhet och skickar ändringen till API
    /// </summary>
    private async Task ToggleDevice(DeviceStatus device)
    {
        device.IsOn = !device.IsOn;
        var response = await Http.PutAsJsonAsync($"http://localhost:5277/api/status/{device.Id}", device);
        if (response.IsSuccessStatusCode)
        {
            await LoadDevices();
        }
    }


    /// <summary>
    /// Tar bort en enhet från databasen via API
    /// </summary>
    private async Task DeleteDevice(int id)
    {
        var response = await Http.DeleteAsync($"http://localhost:5277/api/status/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadDevices();
        }
    }

    /// <summary>
    /// Lägger till en ny enhet med det namn som användaren har skrivit in
    /// </summary>
    private async Task AddDevice()
    {
        if (string.IsNullOrWhiteSpace(newDeviceName)) return;

        var newDevice = new DeviceStatus { Name = newDeviceName, IsOn = false };
        var response = await Http.PostAsJsonAsync("http://localhost:5277/api/status", newDevice);
        if (response.IsSuccessStatusCode)
        {
            newDeviceName = "";
            await LoadDevices();
        }
    }

    /// <summary>
    /// Loggar ut användaren genom att ta bort token och gå till inloggningssidan
    /// </summary>
    private async Task Logout()
    {
        JwtStore.Token = null;
        await JS.InvokeVoidAsync("localStorage.removeItem", "jwt");
        devices = null;
        Nav.NavigateTo("/login", forceLoad: true);
    }
}
