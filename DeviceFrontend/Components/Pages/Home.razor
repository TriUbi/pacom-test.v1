@page "/status"
@inject HttpClient Http

<h3>Status: 
    <span style="color:@(isOn ? "green" : "red")">
        @(isOn ? "ON 🟢" : "OFF 🔴")
    </span>
</h3>

<button @onclick="ToggleStatus">
    @(isOn ? "Turn OFF" : "Turn ON")
</button>

@code {
    private bool isOn = false;
    private int currentId;

    public class DeviceStatus
    {
        public int Id { get; set; }
        public bool IsOn { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<DeviceStatus>("http://localhost:5277/api/status/first");
        if (result != null)
        {
            isOn = result.IsOn;
            currentId = result.Id;
            Console.WriteLine($"ℹ️ Initial value: Id={currentId}, IsOn={isOn}");
        }
    }

    private async Task ToggleStatus()
    {
        isOn = !isOn;
        Console.WriteLine($"🔁 ToggleStatus called. New IsOn = {isOn}, currentId = {currentId}");

        var updated = new DeviceStatus { Id = currentId, IsOn = isOn };

        if (currentId == 0)
        {
            Console.WriteLine("🚀 Sending POST...");
            var response = await Http.PostAsJsonAsync("http://localhost:5277/api/status", updated);

            if (response.IsSuccessStatusCode)
            {
                var created = await response.Content.ReadFromJsonAsync<DeviceStatus>();
                currentId = created?.Id ?? 0;
                Console.WriteLine($"✅ Created in backend! New Id = {currentId}");
            }
            else
            {
                Console.WriteLine("❌ POST failed.");
            }
        }
        else
        {
            Console.WriteLine("🔄 Sending PUT...");
            await Http.PutAsJsonAsync($"http://localhost:5277/api/status/{currentId}", updated);
        }
    }
}
