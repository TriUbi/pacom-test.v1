@page "/status"
@inject HttpClient Http

<h3>Status:
    <span style="color:@(isOn ? "green" : "red")">
        @(isOn ? "ON 🟢" : "OFF 🔴")
    </span>
</h3>

<button class="btn btn-primary" @onclick="ToggleStatus">
    @(isOn ? "Turn OFF" : "Turn ON")
</button>

<p><strong>Debug:</strong> Id=@currentId | IsOn=@isOn</p>
<p style="font-style: italic; color: gray;">@debugText</p>

@code {
    private bool isOn = false;
    private int currentId;
    private string debugText = "";

    public class DeviceStatus
    {
        public int Id { get; set; }
        public bool IsOn { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<DeviceStatus>("api/status/first");
            if (result != null)
            {
                isOn = result.IsOn;
                currentId = result.Id;
                debugText = $"📦 Initial: Id={currentId}, IsOn={isOn}";
            }
        }
        catch (Exception ex)
        {
            debugText = $"❌ Error loading initial status: {ex.Message}";
        }
    }

    private async Task ToggleStatus()
    {
        try 
        {
            debugText = "🔄 Button clicked!";
            var updated = new DeviceStatus { Id = currentId, IsOn = !isOn };

            if (currentId == 0)
            {
                debugText = "🆕 Creating new status...";
                var response = await Http.PostAsJsonAsync("api/status", updated);
                if (response.IsSuccessStatusCode)
                {
                    var created = await response.Content.ReadFromJsonAsync<DeviceStatus>();
                    if (created != null)
                    {
                        currentId = created.Id;
                        isOn = created.IsOn;
                        debugText = $"✅ Created: Id={currentId}, IsOn={isOn}";
                    }
                }
                else
                {
                    debugText = $"❌ Error creating status: {response.StatusCode}";
                }
            }
            else
            {
                debugText = $"✏️ Updating Id={currentId} to IsOn={!isOn}";
                var response = await Http.PutAsJsonAsync($"api/status/{currentId}", updated);
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<DeviceStatus>();
                    if (result != null)
                    {
                        isOn = result.IsOn;
                        debugText = $"✅ Updated: Id={currentId}, IsOn={isOn}";
                    }
                }
                else
                {
                    debugText = $"❌ Error updating status: {response.StatusCode}";
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            debugText = $"❌ Error: {ex.Message}";
        }
    }
}
