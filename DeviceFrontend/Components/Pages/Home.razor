@page "/"
@rendermode InteractiveServer
@inject HttpClient Http

<h2>Enheter i sjukhuset 🏥</h2>

<!-- Form för att lägga till ny enhet -->
<div class="mb-3">
    <input @bind="newDeviceName" placeholder="Namn på ny enhet" class="form-control" />
    <button class="btn btn-success mt-2" @onclick="AddDevice">Lägg till enhet</button>
</div>

<!-- Tabell med alla enheter -->
@if (devices == null)
{
    <p>Laddar enheter...</p>
}
else if (devices.Count == 0)
{
    <p>Inga enheter tillagda ännu.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Namn</th>
                <th>Status</th>
                <th>Styr</th>
                <th>Ta bort</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in devices)
            {
                <tr>
                    <td>@device.Name</td>
                    <td style="color:@(device.IsOn ? "green" : "red")">
                        @(device.IsOn ? "ON 🟢" : "OFF 🔴")
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ToggleDevice(device)">
                            @(device.IsOn ? "Stäng av" : "Starta")
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteDevice(device.Id)">🗑</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DeviceStatus>? devices;
    private string newDeviceName = "";

    public class DeviceStatus
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public bool IsOn { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDevices();
    }

    private async Task LoadDevices()
    {
        try
        {
            devices = await Http.GetFromJsonAsync<List<DeviceStatus>>("http://localhost:5277/api/status");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading devices: " + ex.Message);
        }
    }

    private async Task ToggleDevice(DeviceStatus device)
    {
        device.IsOn = !device.IsOn;
        var response = await Http.PutAsJsonAsync($"http://localhost:5277/api/status/{device.Id}", device);
        if (response.IsSuccessStatusCode)
        {
            await LoadDevices();
        }
    }

    private async Task DeleteDevice(int id)
    {
        var response = await Http.DeleteAsync($"http://localhost:5277/api/status/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadDevices();
        }
    }

    private async Task AddDevice()
    {
        if (string.IsNullOrWhiteSpace(newDeviceName)) return;

        var newDevice = new DeviceStatus { Name = newDeviceName, IsOn = false };
        var response = await Http.PostAsJsonAsync("http://localhost:5277/api/status", newDevice);
        if (response.IsSuccessStatusCode)
        {
            newDeviceName = "";
            await LoadDevices();
        }
    }
}
